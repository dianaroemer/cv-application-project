{"version":3,"sources":["Components/Navbar.js","Components/Field Components/PersonalInformationForm.js","Components/Field Components/WorkExperienceForm.js","Components/Field Components/EducationalExperienceForm.js","Components/FormContainer.js","Components/PreviewContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","style","borderStyle","borderRadius","borderColor","borderWidth","Component","PersonalInformationForm","this","props","updateInputField","personalInformation","type","placeholder","onChange","e","value","name","title","photoURL","address","phone","email","linkedIn","gitHub","WorkExperienceForm","workExperienceArr","rows","forEach","element","push","workExperience","key","onClick","preventDefault","WorkExperienceSlot","position","company","location","startDate","endDate","descriptionOfDuties","EducationalExperienceForm","EducationExperienceSlot","FormContainer","appState","PreviewContainer","workRows","map","whiteSpace","App","bind","state","uniqid","targetParent","targetField","setState","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.17165536.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Navbar extends Component {\n    // constructor(props) {\n        // super(props);\n    // }\n\n    render() {\n\n        return (\n            <div className='navbarContainer' style={{borderStyle: 'solid', borderRadius: 2, borderColor: 'orange', borderWidth: 10}}>\n                <h3>I am Navbar.js. Build me.</h3>\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react'\n\nclass PersonalInformationForm extends Component {\n    // constructor(props) {\n        // super(props);\n    // }\n\n    render() {\n        const { updateInputField, personalInformation } = this.props;    \n        // const personalInformationObject = userData[0];   \n\n        return (\n            <div className='personalInformationForm' style={{borderStyle: 'solid', borderRadius: 2, borderColor: 'purple', borderWidth: 10}}>\n                <h3>I am personalInformationForm.js. I take all of the personal information fields and keep them in one place!</h3>\n                <div className='nameFieldContainer'>\n                    Name: <input className=\"inputField\" type=\"text\" placeholder='Ferris Bueller' onChange={e => updateInputField(e, personalInformation, 'name')} value={personalInformation.name}></input>\n                </div>\n                <div className='titleFieldContainer'>\n                    Title: <input className=\"inputField\" type=\"text\" placeholder='Front-end Developer' onChange={e => updateInputField(e, personalInformation, 'title')} value={personalInformation.title}>\n                    </input>\n                </div>\n                <div className='photoFieldContainer'>\n                    Photo URL: <input className=\"inputField\" type=\"url\" placeholder='ttps://giphy.com/embed/BzyTuYCmvSORqs1ABM' onChange={e => updateInputField(e, personalInformation, 'photoURL')} value={personalInformation.photoURL}></input>\n                    <button type=\"button\">Get Photo</button>\n                </div>\n                <div className='addressFieldContainer'>\n                    Address: <input className=\"inputField\" type=\"text\" placeholder='137 Trench Run, Death Star' onChange={e => updateInputField(e, personalInformation, 'address')} value={personalInformation.address}></input>\n                </div>\n                <div className='phoneFieldContainer'>\n                    Phone: <input className=\"inputField\" type=\"tel\" placeholder='123-456-1337'  onChange={e => updateInputField(e, personalInformation, 'phone')} value={personalInformation.phone}></input>\n                </div>\n                <div className='emailFieldContainer'>\n                    Email: <input className=\"inputField\" type=\"tel\" placeholder='developer_who_says_NI@email.com' onChange={e => updateInputField(e, personalInformation, 'email')} value={personalInformation.email}></input>\n                </div>\n                <div className='linkedInFieldContainer'>\n                    LinkedIn: <input className=\"inputField\" type=\"url\" placeholder='linkedin.com/McClane-John'  onChange={e => updateInputField(e, personalInformation, 'linkedIn')} value={personalInformation.linkedIn}></input>\n                </div>\n                <div className='gitHubFieldContainer'>\n                    GitHub: <input className=\"inputField\" type=\"url\" placeholder='github.com/github' onChange={e => updateInputField(e, personalInformation, 'gitHub')} value={personalInformation.gitHub}></input>\n                </div>\n\n\n\n                <p></p>\n                {/* <button type=\"submit\" onClick={e => e.preventDefault()}>Submit</button> */}\n                <p></p>\n            </div>\n        )\n    }\n}\n\nexport default PersonalInformationForm;\n\n/*\n\n--- Personal Information ---\nFirst Name: \nLast Name:\nTitle:\nPhoto?:\nAddress:\nPhone Number:\nEmail:\nLinkedIn:\nGithub:\nDescription/Short Bio:\n\n\n*/\n","import React, { Component } from 'react'\n\nclass WorkExperienceForm extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        const {workExperienceArr, updateInputField} = this.props;\n        let rows =[];\n\n        workExperienceArr.forEach(element => {\n            // console.log(updateInputField);\n            rows.push(\n                <WorkExperienceSlot \n                    workExperience={element}\n                    key={element.key}\n                    updateInputField={updateInputField}/>\n            )\n        });\n\n        return (\n            <div className='workExperienceField' style={{borderStyle: 'solid', borderRadius: 2, borderColor: 'navy', borderWidth: 10}}>\n                <h3>I am workExperienceForm.js. I take all of the work experience fields and keep them together! I am one wrapper field with an add button, and an interating subcomponent for variable numbers of workExperienceField</h3>\n                \n                {rows}\n            \n            <p></p>\n            <button type=\"submit\" onClick={e => e.preventDefault()}>Add More Work Experience</button>\n            <p></p>\n        </div>\n        )\n    }\n}\n\nclass WorkExperienceSlot extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        const { workExperience, updateInputField } = this.props;\n\n        return (\n            <form className='workExperienceSlot' style={{borderStyle: 'dotted', borderRadius: 2, borderColor: 'magenta', borderWidth: 10}}>\n                <p>I am an individual WorkExperienceSlot. There can be several or none of me, and are determined variably by state management in app!</p>\n                <div className='positionFieldContainer'>\n                    Position: <input className=\"inputField\" type=\"text\" placeholder='Stormtrooper, 2nd Battalion' onChange={e => updateInputField(e, workExperience, 'position')} value={workExperience.position}></input>\n                </div>\n                <div className='companyFieldContainer'>\n                    Company: <input className=\"inputField\" type=\"text\" placeholder='The Empire, LLC' onChange={e => updateInputField(e, workExperience, 'company')} value={workExperience.company}>\n                    </input>\n                </div>\n                <div className='locationFieldContainer'>\n                    Location: <input className=\"inputField\" type=\"text\" placeholder='Star, Death, The' onChange={e => updateInputField(e, workExperience, 'location')} value={workExperience.location}></input>\n                </div>\n                <div className='startDateFieldContainer'>\n                    Start Date: <input className=\"inputField\" type=\"month\" onChange={e => updateInputField(e, workExperience, 'startDate')} value={workExperience.startDate}></input>\n                </div>\n                <div className='endDateFieldContainer'>\n                    End Date: <input className=\"inputField\" type=\"month\" onChange={e => updateInputField(e, workExperience, 'endDate')} value={workExperience.endDate}></input>\n                </div>\n\n                <div className='descriptionFieldContainer'>\n                    Description of Duties: <textarea className='inputField' placeholder='Kept workspace free of filth Rebel scum, organized weekly Stormtrooper Socials' onChange={e => updateInputField(e, workExperience, 'descriptionOfDuties')} value={workExperience.descriptionOfDuties}></textarea>\n                </div>\n\n                <button type=\"button\"> Delete this Entry </button>\n                <p></p>\n            </form>\n        )\n    }\n\n}\n\nexport default WorkExperienceForm;\n\n/* \n--- Work Experience(VARIABLE, ADD AND DELETE THESE FORM FIELDS) ---\nPosition:\nCompany:\nCity:\nStart Date:\nEnd Date:? (maybe set this is a duration sort of thing?)\nShort description:\n*/","import React, { Component } from 'react'\n\nclass EducationalExperienceForm extends Component {\n    // constructor(props) {\n        // super(props);\n    // }\n\n    render() {\n\n        return (\n            <div className='educationExperienceField' style={{borderStyle: 'solid', borderRadius: 2, borderColor: 'brown', borderWidth: 10}}>\n                <h3>I am EducationalExperienceForm.js. I take all of the educational experience fields and keep them together! I am one wrapper field with an add button, and an interating subcomponent for variable numbers of educationExperienceField</h3>\n\n                <EducationExperienceSlot style={{borderStyle: 'dashed', borderRadius: 2, borderColor: 'maroon', borderWidth: 10}}/>\n                <EducationExperienceSlot style={{borderStyle: 'dashed', borderRadius: 2, borderColor: 'maroon', borderWidth: 10}}/>\n            \n            <p></p>\n            <button type=\"submit\" onClick={e => e.preventDefault()}>Add More Educational Experience</button>\n            <p></p>\n        </div>\n        )\n    }\n}\n\nclass EducationExperienceSlot extends Component {\n\n    // constructor(props) {\n        // super(props);\n    // }\n\n    render() {\n        return (\n            <form className='educationExperienceSlot' style={{borderStyle: 'dotted', borderRadius: 2, borderColor: 'aqua', borderWidth: 10}}>\n                <p>I am an individual EducationExperienceSlot. There can be several or none of me, and are determined variably by state management in app!</p>\n\n\n                <div className='institutionFieldContainer'>\n                    Institution: <input className=\"inputField\" type=\"text\" placeholder='Hogwarts School of Witchcraft and Wizardry'></input>\n                </div>\n                <div className='degreeFieldContainer'>\n                    Degree: <input className=\"inputField\" type=\"text\" placeholder='Master of The Dark Arts'>\n                    </input>\n                </div>\n                <div className='startDateFieldContainer'>\n                    Start Date: <input className=\"inputField\" type=\"month\" value='2015-01' onChange={e => e.preventDefault()}></input>\n                </div>\n                <div className='endDateFieldContainer'>\n                    End Date: <input className=\"inputField\" type=\"month\" value='2019-01' onChange={e => e.preventDefault()}></input>\n                </div>\n\n                <div className='detailsFieldContainer'>\n                    Additional Details: <textarea className='inputField' placeholder='First Hufflepuff to graduate in The Dark Arts'></textarea>\n                </div>\n                <button type=\"button\"> Delete this Entry </button>\n                <p></p>\n            </form>\n        )\n    }\n\n}\n\nexport default EducationalExperienceForm;\n\n\n\n\n/*\n--- Education (VARIABLE, ADD AND DELETE THESE FORM FIELDS) ---\nInstitution:\nDegree: (Or degree progress)\nSubject:\nStart Date:\nEnd Date: ?(again, looking at duration to replace these two dates)\n*/","import React, { Component } from 'react'\n// import FormElement from './FormElement';\nimport PersonalInformationForm from './Field Components/PersonalInformationForm';\nimport WorkExperienceForm from './Field Components/WorkExperienceForm'\nimport EducationalExperienceForm from './Field Components/EducationalExperienceForm';\n\n\nclass FormContainer extends Component {\n    // constructor(props) {\n        // super(props);\n    // }\n\n    render() {\n        const { updateInputField, appState } = this.props;\n\n\n        return (\n            <div className='FormContainer' style={{borderStyle: 'solid', borderRadius: 2, borderColor: 'green', borderWidth: 10}}>\n                <h3>I am FormContainer.js. I contain forms. Let's put something together</h3>\n                <PersonalInformationForm \n                    updateInputField={updateInputField}\n                    personalInformation={appState.personalInformation}/>\n                <WorkExperienceForm workExperienceArr={appState.workExperience.workExperienceArr}\n                    updateInputField={updateInputField}/>\n                <EducationalExperienceForm/>\n                {/* <FormElement/> */}\n                {/* <FormElement/> */}\n            </div>\n        )\n    }\n}\n\nexport default FormContainer;","import React, { Component } from 'react'\n\nclass PreviewContainer extends Component {\n    // constructor(props){\n        // super(props);\n    // }\n\n    render() {\n\n        const { appState } = this.props;\n\n        const personalInformation = appState.personalInformation;\n        const workExperienceArr = appState.workExperience.workExperienceArr;\n\n        let workRows = [];\n\n        workExperienceArr.map(element => {\n            workRows.push(\n                <div className='previewWorkExperienceSlot' key={element.key}>\n                    <text>Position: {element.position}</text> {'\\n'}\n                    <text>Company: {element.company}</text> {'\\n'}\n                    <text>Location: {element.location}</text> {'\\n'}\n                    <text>Start Date: {element.startDate}</text> {'\\n'}\n                    <text>End Date: {element.endDate}</text> {'\\n'}\n                    <text>Description of Duties: {element.descriptionOfDuties}</text> {'\\n'}\n                    {'\\n'}\n                </div>\n            )\n        })\n\n        return (\n\n            <div className='previewContainer' style={{borderStyle: 'solid', borderRadius: 2, borderWidth: 10, borderColor: 'red', whiteSpace: 'pre-wrap'}}>\n\n                <h3>I am PreviewContainer.js. Eventually, I will show the output of state from App.js.</h3>\n                <div className='previewPersonal'>\n                    Name: {personalInformation.name} {'\\n'}\n                    Title: {personalInformation.title} {'\\n'}\n                    Photo URL: {personalInformation.photoURL} {'\\n'}\n                    Address: {personalInformation.address} {'\\n'}\n                    Phone #: {personalInformation.phone} {'\\n'}\n                    Email: {personalInformation.email} {'\\n'}\n                    LinkedIn: {personalInformation.linkedIn} {'\\n'}\n                    GitHub: {personalInformation.gitHub} {'\\n'}\n                </div>\n                <div className='previewWorkExperienceContainer'>\n                    {'\\n'} ----- Work Experience ----- \n                    {'\\n'}\n                    {workRows}\n                </div>\n                <div className='previewEducationalExperienceContainer'>\n                    {'\\n'} ---- Educational Experience ---- \n                    {'\\n'}\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default PreviewContainer;","// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport uniqid from \"uniqid\";\nimport Navbar from './Components/Navbar';\nimport FormContainer from './Components/FormContainer';\nimport PreviewContainer from './Components/PreviewContainer';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateInputField = this.updateInputField.bind(this);\n\n    this.state = {\n      personalInformation: {\n        name : '',\n        title: '',\n        photoURL: '',\n        address: '',\n        phone: '',\n        email: '',\n        linkedIn: '',\n        gitHub: '',\n        type: 'personalInformation'\n      },\n      workExperience: {\n        workExperienceArr: [\n          {\n            position: '1',\n            company: '',\n            location: '',\n            startDate: '2015-01',\n            endDate: '2019-01',\n            descriptionOfDuties: '',\n            key: uniqid(),\n            type: 'workExperience'\n          }, \n          {\n            position: '2',\n            company: '',\n            location: '',\n            startDate: '2019-01',\n            endDate: '2022-06',\n            descriptionOfDuties: '',\n            key: uniqid(),\n            type: 'workExperience'\n          }\n        ]\n      },\n    }\n  }\n\n  updateInputField(e, targetParent, targetField) {\n    // console.log(`I am updateInputField, here are my passed args`);\n    // console.log(e)\n    // console.log(e.target.value);\n    // console.log(targetParent);\n    // console.log(targetField);\n    // console.log(`-------------------------------`)\n\n    if(targetParent.type === 'personalInformation') {\n      this.setState({\n        // This setState works by passing around the targetParent.type and the targetField. targetParent.type is included in each userData object as a string description of each parent object's name, while targetField is manually set when passing the onChange function, as it is assigned to its specific field and value. There may be a way to tie a React elements value prop more literally, but this works quickly with string evaluation into a computed property name that only overrides the one value that is being targeted.\n        [targetParent.type] : {\n          ...this.state[targetParent.type],\n          [targetField] : e.target.value\n        }\n      })\n    } else if(targetParent.type === 'workExperience') {\n      // This branch of setState handles modular components, like workExperience and educationalExperience. Because there can be a variable number of workExperience and EducationalExperience, the state management parses away the relevant input, targetField, and parent information to work with any given input that follows App.js's state structure.\n      // console.log(targetParent, targetField, e.target.value, targetParent.type);\n      this.setState({\n        [targetParent.type]: {\n          [targetParent.type + 'Arr']: this.state[targetParent.type][targetParent.type + 'Arr'].map( element => {\n            if(element === targetParent) {\n              return {\n                ...targetParent,\n                [targetField]: e.target.value,\n              }\n            }\n            return element;\n          }),\n        }\n      })\n    } \n\n\n    // console.log(this.state.workExperience.workExperienceArr[0]);\n  }\n\n  render() {\n    return (\n      <div className=\"AppContainer\" style={{borderStyle: 'solid', borderRadius: 2, borderColor: 'blue', borderWidth: 10}}>\n        <h2>I am App.js, my parent is AppContainer. Would you like to develop an App?</h2>\n        <Navbar/>\n        <div className='content' >\n          <FormContainer \n            updateInputField={this.updateInputField}\n            appState={this.state}/>\n          <PreviewContainer appState={this.state}/>\n        </div>\n      </div>\n    )\n  }\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}